.TH "" "" "" "" ""
.SS Installation for Docker
.PP
Logagent is a general purpose log shipper.
The Logagent Docker image is pre\-configured for the log collection on
container platforms.
It runs as a tiny container on every Docker host and collects logs for
all cluster nodes and their containers.
All container logs are enriched with Kubernetes and Docker EE/Swarm
metadata.
.PP
See: sematext/logagent (https://hub.docker.com/r/sematext/logagent/) on
Docker Hub.
.SS Getting started
.PP
To run Logagent you will need a Logs App Token.
.PD 0
.P
.PD
If you don\[aq]t have Logs Apps yet, you can create Apps
now (https://apps.sematext.com/ui/integrations).
.PP
The Logagent (https://sematext.com/logagent) docker container can be
configured through the following environment variables:
.IP \[bu] 2
\f[B]REGION\f[]: Sematext Cloud region \f[B]US\f[] or \f[B]EU\f[]
(default: US).
The receiver URL will be set to EU/US default values.
When using REGION, you don\[aq]t need to set \f[C]LOGS_RECEIVER_URL\f[]
(see below).
.IP \[bu] 2
\f[B]LOGS_RECEIVER_URL\f[]: The URL of your Elasticsearch Endpoint
\f[I](defaults to Sematext Cloud US
\f[C]https://logsene\-receiver.sematext.com\f[])\f[].
.RS 2
.IP \[bu] 2
For Sematext Europe use
\f[C]https://logsene\-receiver.eu.sematext.com\f[].
.IP \[bu] 2
For Elasticsearch \f[C]https://elasticserch\-server\-name:9200\f[].
.RE
.IP \[bu] 2
\f[B]LOGS_TOKEN\f[]: The index where the agent should log to \f[I](for
Sematext Cloud (https://sematext.com/cloud) users the logs token)\f[]
.IP \[bu] 2
\f[B]LOGAGENT_ARGS\f[]: Additional command line arguments for
Logagent (https://sematext.com/docs/logagent/cli-parameters/)
.RS 2
to specify a log source name or
to act as syslog server.
Please refer to Logagent command line argumetns in the Logagent
Documentation (https://sematext.com/docs/logagent/cli-parameters/)
.RE
.IP \[bu] 2
\f[B]LOG_GLOB\f[]: Semicolon\-separated list of file globs
.RS 2
Mount your server log files into the container using a Docker volume
e.g.
\&.
.RE
.IP \[bu] 2
\f[B]\-v /var/run/docker.sock:/var/run/docker.sock\f[] \- Collect
container logs by mounting the docker socket (mandatory)
.SS Docker Run
.PP
The most basic start method is using docker run command:
.IP
.nf
\f[C]
docker\ pull\ sematext/logagent
docker\ run\ \-d\ \-\-restart=always\ \-\-name\ logagent\ \\
\-e\ LOGS_TOKEN=YOUR_LOGS_TOKEN\ \\
\-e\ LOGS_RECEIVER_URL="https://logsene\-receiver.sematext.com"\ \\
\-v\ /var/run/docker.sock:/var/run/docker.sock\ sematext/logagent
\f[]
.fi
.SS Docker Compose
.PP
To use Docker Compose (https://docs.docker.com/compose/) create
docker\-compose.yml as follows and insert real tokens:
.IP
.nf
\f[C]

#\ docker\-compose.yml
logagent:
\ \ image:\ \[aq]sematext/logagent:latest\[aq]
\ \ environment:
\ \ \ \ \-\ LOGS_TOKEN=YOUR_LOGS_TOKEN\ 
\ \ \ \ \-\ LOGS_RECEIVER_URL="https://logsene\-receiver.sematext.com"
\ \ cap_add:
\ \ \ \ \-\ SYS_ADMIN
\ \ restart:\ always
\ \ volumes:
\ \ \ \ \-\ \[aq]/var/run/docker.sock:/var/run/docker.sock\[aq]
\f[]
.fi
.PP
Then start Logagent with the docker\-compose file:
.IP
.nf
\f[C]
docker\-compose\ up\ \-d
\f[]
.fi
.SS Docker Swarm and Docker Enterprise
.PP
Connect your Docker client to Swarm or UCP remote API endpoint and
deploy Logagent with following docker command with your Logs Tokens:
.IP
.nf
\f[C]
docker\ service\ create\ \-\-restart=always\ \-mode\ global\ \-name\ logagent\ \\
\-mount\ type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock\ \\
\-e\ LOGS_TOKEN="REPLACE\ THIS\ WITH\ YOUR\ LOGS\ TOKEN"\ \\
\-e\ LOGS_RECEIVER_URL="https://logsene\-receiver.sematext.com"\ \\
sematext/logagent
\f[]
.fi
.SS Kubernetes and OpenShift
.PP
Run Logagent as Kubernetes
DaemonSet (https://kubernetes.io/docs/concepts/workloads/controllers/daemonset).
.PP
First, create
logagent\-daemonset.yml (https://github.com/sematext/logagent-js/blob/master/kubernetes/logagent-daemonset.yml)
.IP
.nf
\f[C]
curl\ \-o\ logagent\-daemonset.yml\ https://raw.githubusercontent.com/sematext/logagent\-js/master/kubernetes/logagent\-daemonset.yml
\f[]
.fi
.PP
Then run the DaemonSet:
.IP
.nf
\f[C]
kubectl\ create\ \-f\ logagent\-daemonset.yml
\f[]
.fi
.PP
On Red Hat OpenShift use the "oc" command instead of kubectl.
.IP
.nf
\f[C]
oc\ apply\ \-f\ logagent\-daemonset.yml
\f[]
.fi
.SS Kubernetes with containerd and IBM Cloud
.PP
Kubernetes can use cointainerd as container engine.
In this case Logagent can\[aq]t use the Docker remote API to retrieve
logs and metadata.
Instead logs are collected from containerd log files and requires access
to the relevant directories.
The logagent input\-filter for containerd supports:
.IP \[bu] 2
Tailing log files from \f[C]/var/log/containers/\f[],
\f[C]/var/log/pods\f[] and \f[C]/var/data/kubeletlogs\f[]
.IP \[bu] 2
Enrichment of logs with podName, namespace, containerName, containerId
.IP \[bu] 2
Parsing containerd log headers (timestamp, stream, flags)
.IP \[bu] 2
Parsing message content with logagent parser library
.PP
Run Logagent as Kubernetes
DaemonSet (https://kubernetes.io/docs/concepts/workloads/controllers/daemonset).
.PP
First, create
ibm\-cloud\-logagent\-ds.yml (https://github.com/sematext/logagent-js/blob/master/kubernetes/ibm-cloud-logagent-ds.yml)
.IP
.nf
\f[C]
curl\ \-o\ ibm\-cloud\-logagent\-ds.yml\ \ https://raw.githubusercontent.com/sematext/logagent\-js/master/kubernetes/ibm\-cloud\-logagent\-ds.yml
\f[]
.fi
.PP
Set your Logs Token in the spec.env section in the
\f[C]ibm\-cloud\-logagent\-ds.yml\f[] file.
.PP
Then run the DaemonSet:
.IP
.nf
\f[C]
kubectl\ create\ \-f\ ibm\-cloud\-logagent\-ds.yml
\f[]
.fi
.SS Mesos / Marathon
.PP
The following configuration will activate Logagent on every node in the
Mesos cluster.
Please note that you have to specify the number of Mesos nodes
(instances) and Logs Token.
An example call to the Marathon API:
.IP
.nf
\f[C]
curl\ \-XPOST\ \-H\ "Content\-type:\ application/json"\ http://your_marathon_server:8080/v2/apps\ \ \-d\ \[aq]
{
\ \ "container":\ {
\ \ \ \ "type":\ "DOCKER",
\ \ \ \ "docker":\ {
\ \ \ \ \ \ "image":\ "sematext/logagent"
\ \ \ \ },
\ \ \ \ "volumes":\ [
\ \ \ \ \ \ {
\ \ \ \ \ \ \ \ "containerPath":\ "/var/run/docker.sock",
\ \ \ \ \ \ \ \ "hostPath":\ "/var/run/docker.sock",
\ \ \ \ \ \ \ \ "mode":\ "RW"
\ \ \ \ \ \ }
\ \ \ \ ],
\ \ \ \ "network":\ "BRIDGE"
\ \ },
\ \ "env":\ {
\ \ \ \ \ \ \ \ "LOGS_TOKEN":\ "YOUR_LOGS_TOKEN",
\ \ \ \ \ \ \ \ "LOGS_RECEIVER_URL":\ "https://logsene\-receiver.sematext.com"

\ \ },
\ \ "id":\ "sematext\-logagent",
\ \ "instances":\ 1,
\ \ "cpus":\ 0.1,
\ \ "mem":\ 100,
\ \ "constraints":\ [
\ \ \ \ [
\ \ \ \ \ \ "hostname",
\ \ \ \ \ \ "UNIQUE"
\ \ \ \ ]
\ \ ]
}
\f[]
.fi
.SS Configuration Parameters
.SS Mandatory Parameters
Parameter / Environment variable
Description
LOGS_TOKEN
Logs Token enables logging to Sematext Cloud, see logging specific
parameters for filter options and Log Routing section to route logs from
different containers to separate Logs Apps (indices)
\-v /var/run/docker.sock
Path to the docker socket
.SS Optional Parameters
Parameter / Environment variable
Description
REGION
Sematext Cloud region US or EU (default: US).
The receiver URL will be set to EU/US default values.
When using REGION, you don\[aq]t need to set LOGS_RECEIVER_URL (see
below).
LOG_GLOB
Semicolon\-separated list of file globs (e.g.
/var/log//\f[I]\&.log;/mylogs//\f[].log) to collect log files from the
host, assuming the log files are mounted to /mylogs using Docker \-v
/var/logs:/mylogs
LOGAGENT_ARGS
Additional command line arguments for Logagent (e.g.
LOGAGENT_ARGS="\-n httpd" to specify a log source name or
LOGAGENT_ARGS="\-u 514" to act as syslog server)
\-\-privileged
The parameter might be helpful when Logagent could not start because of
limited permission to connect and write to the Docker socket
/var/run/docker.sock.
The privileged mode is a potential security risk, we recommend to enable
the appropriate security.
Please read about Docker security:
https://docs.docker.com/engine/security/security/
HTTPS_PROXY
URL for a proxy server (behind firewalls)
LOGS_RECEIVER_URL
URL for bulk inserts into Sematext Cloud.
Required for Sematext Enterprise (local IP:PORT) or Sematext Cloud
Europe: https://logsene\-receiver.eu.sematext.com
JOURNALD_UPLOAD_PORT
Port number for the collection of journald logs, forwarded by
systemd\-journal\-upload.service.
Equals to Logagent argument \-\-journald PORT.
SYSTEMD_UNIT_FILTER
A regular expression to filter journald logs by systemd unit name, e.g.
"ssh.service|docker.service".
The default value is ".*".
CONFIG_FILE
Path to the configuration file, containing environment variables
key=value.
Default value: /run/secrets/logagent.
Create a secret with docker secret create logagent ./logagent.cfg.
Start Logagent with `docker service create \-\-mode global \-\-secret
logagent \-\-mount
type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock
sematext/logagent
\-\-privileged
The parameter might be helpful when Logagent could not start because of
limited permission to connect and write to the Docker socket
/var/run/docker.sock.
The privileged mode is a potential security risk, we recommend to enable
the appropriate security.
Please read about Docker security:
https://docs.docker.com/engine/security/security/
.SS Docker Logs Parameters
Parameter / Environment variable
Description
TAGGING_LABELS
A list of docker label names or environment variable names to tag
container logs.
Supporting wildcards.
Default value:
IGNORE_LOGS_PATTERN
Filter logs by a JS regular expression.
E.g.
LOGSENE_ENABLED_DEFAULT
Enables log collection for containers having no explicit
label/environment variable LOGSENE_ENABLED set.
Default value: true.
See section Log Routing.
.SS Whitelist Containers for Logging
Parameter / Environment variable
Description
MATCH_BY_NAME
Regular expression to white list container names
MATCH_BY_IMAGE
Regular expression to white list image names
.SS Blacklist Containers
Parameter / Environment variable
Description
SKIP_BY_NAME
Regular expression to black list container names
SKIP_BY_IMAGE
Regular expression to black list image names for logging
.SS Set Log Patterns
.PP
Logagent supports various log formats defined in
patterns.yml (https://github.com/sematext/logagent-js/blob/master/patterns.yml)
file.
The Log Parser Patterns (https://sematext.com/docs/logagent/parser/) can
be customized by proving your YAML file.
Parameter / Environment variable
Description
PATTERNS_URL
Load pattern.yml via HTTP e.g.
LOGAGENT_PATTERNS
Pass patterns.yml via env.
variable e.g.
LOGAGENT_PATTERNS_BASE64
Set to "true" if the LOGAGENT_PATTERNS patterns file you are passing in
via env.
variable is base64 encoded e.g
\&.
Useful if your patterns file is not getting set properly due to shell
interpretation or otherwise.
PATTERN_MATCHING_ENABLED
Activate logagent\-js parser, default value is true.
To disable the log parser set the value to false.
This could increase the throughput of log processing for nodes with a
very high log volume.
\-v /patterns.yml:/etc/logagent/patterns.yml
Mount a patterns file to customize patterns for log parsing
.SS Other Options
Parameter / Environment variable
Description
\-v /tmp:/log\-buffer
Directory to store logs, in a case of a network or service outage.
Docker Agent deletes these files after successful transmission.
GEOIP_ENABLED
Enables GeoIP lookups in the log parser, default value: "false"
MAXMIND_DB_DIR
Directory for the Geo\-IP lite database, must end with /.
Storing the DB in a volume could save downloads for updates after
restarts.
Using /tmp/ (ramdisk) could speed up Geo\-IP lookups (requires add.
~30 MB main memory).
REMOVE_FIELDS
Removes fields from parsed/enriched logs.
E.g.
.SS Configuration Manual
.SS Blacklisting and Whitelisting Logs
.PP
Not all logs might be of interest, so sooner or later you will have the
need to blacklist some log types.
This is one of the reasons why Logagent automatically adds the following
tags to all logs:
.IP \[bu] 2
Container ID
.IP \[bu] 2
Container Name
.IP \[bu] 2
Image Name
.IP \[bu] 2
Docker Compose Project Name
.IP \[bu] 2
Docker Compose Service Name
.IP \[bu] 2
Docker Compose Container Number
.PP
Using this “log metadata” you can whitelist or blacklist log outputs by
image or container names.
The relevant environment variables are:
.IP \[bu] 2
MATCH_BY_NAME \[em] a regular expression to whitelist container names
.IP \[bu] 2
MATCH_BY_IMAGE \[em] a regular expression to whitelist image names
.IP \[bu] 2
SKIP_BY_NAME \[em] a regular expression to blacklist container names
.IP \[bu] 2
SKIP_BY_IMAGE \[em] a regular expression to blacklist image names
Some log messages are useless or noisy, like access to health check URLs
in Kubernetes.
You can filter such messages via regular expressions by setting the
following environment variable:
.SS Container Log Parsing
.PP
In Docker, logs are console output streams from containers.
They might be a mix of plain text messages from start scripts and
structured logs from applications.
The problem is obvious \[en] you can't just take a stream of log events
all mixed up and treat them like a blob.
You need to be able to tell which log event belongs to what container,
what app, parse it correctly in order to structure it so you can later
derive more insight and operational intelligence from logs, etc.
.PP
Logagent analyzes the event format, parses out data, and turns logs into
structured JSON.
This is important because the value of logs increases when you structure
them \[em] you can then slice and dice them and gain a lot more insight
about how your containers, servers, and applications operate.
.PP
Traditionally it was necessary to use log shippers like Logstash,
Fluentd or Rsyslog to parse log messages.
The problem is that such setups are typically deployed in a very static
fashion and configured for each input source.
That does not work well in the hyper\-dynamic world of containers! We
have seen people struggling with the Syslog drivers, parsers
configurations, log routing, and more! With its integrated automatic
format detection, Logagent eliminates this struggle \[em] and the waste
of resources \[em] both computing and human time that goes into dealing
with such things! This integration has a low footprint, doesn't need
retransmissions of logs to external services, and it detects log types
for the most popular applications and generic JSON and line\-oriented
log formats out of the box!
.PP
[IMAGE: Example: Apache Access Log fields generated by
Logagent (https://sematext.com/wp-content/uploads/2016/06/image17.png)]
.PP
For example, Logagent can parse logs from official images like:
.IP \[bu] 2
Nginx, Apache, Redis, MongoDB, MySQL
.IP \[bu] 2
Elasticsearch, Solr, Kafka, Zookeeper
.IP \[bu] 2
Hadoop, HBase, Cassandra
.IP \[bu] 2
Any JSON output with special support for Logstash or Bunyan format
.IP \[bu] 2
Plain text messages with or without timestamps in various formats
.IP \[bu] 2
Various Linux and Mac OSX system logs
.SS Adding log parsing patterns
.PP
In addition, you can define your own patterns for any log format you
need to be able to parse and structure.
There are three options to pass individual log parser patterns:
.IP \[bu] 2
Configuration file in a mounted volume:
\f[C]\-v\ PATH_TO_YOUR_FILE:/etc/logagent/patterns.yml\f[]
.IP \[bu] 2
Kubernetes ConfigMap example: Template for patterns.yml as
ConfigMap (https://github.com/sematext/logagent-js/blob/master/kubernetes/configMapExample.yml)
.IP \[bu] 2
Content of the configuration file in an environment variable:
\f[C]\-e\ LOGAGENT_PATTERNS=”$(cat\ patterns.yml)”\f[]
.IP \[bu] 2
Set patterns URL as environment variable:
\f[C]\-e\ PATTERNS_URL=http://yourserver/patterns.yml\f[]
.PP
The file format for the patterns.yml file is based on JS\-YAML, in
short:
.IP \[bu] 2
\f[C]\[en]\f[] indicates an array element
.IP \[bu] 2
\f[C]!js/regexp\f[] \[en] indicates a JavaScript regular expression
.IP \[bu] 2
\f[C]!!js/function\ >\f[] \[en] indicates a JavaScript function
.PP
The file has the following properties:
.IP \[bu] 2
patterns: list of patterns, each pattern starts with “\-“
.IP \[bu] 2
match: a list of pattern definition for a specific log source
(image/container)
.RS 2
.IP \[bu] 2
sourceName: a regular expression matching the name of the log source.
The source name is a combination of image name and container name.
.IP \[bu] 2
regex: JS regular expression
.IP \[bu] 2
fields: field list of extracted match groups from the regex
.IP \[bu] 2
type: type used in Sematext Cloud (Elasticsearch Mapping)
.IP \[bu] 2
dateFormat: format of the special fields ‘ts', if the date format
matches, a new field \@timestamp is generated
.IP \[bu] 2
transform: A JavaScript function to manipulate the result of regex and
date parsing
.RE
.PP
The following example shows pattern definitions for web server logs,
which is one of the patterns available by default: [IMAGE: Example from
https://sematext.github.io/logagent\-js/parser/ (https://sematext.com/wp-content/uploads/2016/06/image05-1.png)]
.PP
This example shows a few very interesting features:
.IP \[bu] 2
Masking sensitive data with “autohash” property, listing fields to be
replaced with a hash code
.IP \[bu] 2
Automatic Geo\-IP lookups including automatic updates for Maxmind
Geo\-IP lite database
.IP \[bu] 2
Post\-processing of parsed logs with JavaScript functions
.PP
The component for detecting and parsing log messages \[em]
logagent\-js (http://sematext.com/docs/logagent/parser/) \[em] is open
source and contributions for even more log formats are welcome.
.SS Log Routing
.PP
Routing logs from different containers to separate Sematext Cloud Logs
Apps can be configured via docker labels (or environment variables e.g.
on Kubernetes).
Simply tag a container with the label (or environment variable)
\f[C]LOGSENE_TOKEN=YOUR_LOGSENE_TOKEN\f[].
Logagent inspects the containers for this label and ships the logs to
the specified Logs App.
.PP
\f[B]Example:\f[] The following command will start Nginx webserver and
logs for this container will be shipped to the related Logs App.
.IP
.nf
\f[C]
docker\ run\ \-\-label\ LOGSENE_TOKEN=REPLACE_WITH_YOUR_LOGS_TOKEN\ \-p\ 80:80\ nginx
#\ or\ use\ environment\ variable\ on\ Kubernetes\ (no\ support\ for\ Docker\ labels)
#\ docker\ run\ \-e\ LOGSENE_TOKEN=REPLACE_WITH_YOUR_LOG_TOKEN\ \-p\ 80:80\ nginx
\f[]
.fi
.PP
All other container logs will be shipped to the Logs App specified in
the docker run command for \f[C]sematext/logagent\f[] with the
environment variable \f[C]LOGSENE_TOKEN\f[].
.PP
By default, all logs from all containers are collected and sent to
Sematext Cloud/Elasticsearch.
You can change this default by setting the
\f[C]LOGSENE_ENABLED_DEFAULT=false\f[] label for the Logagent container.
This default can be overridden, on each container, through the
\f[C]LOGSENE_ENABLED\f[] label.
.PP
Please refer to Docker Log Management &
Enrichment (https://sematext.com/blog/2017/05/15/docker-log-management-enrichment/)
for further details.
.SS Known Issues
.PP
\f[B]Conflict with Docker logging\-drivers. Logagent is running with a
valid Logs Token, but Sematext Cloud does not show container logs. \f[]
.PP
Please note that Logagent collects logs via Docker Remote API.
If you use a Docker logging\-driver other than the default json\-file
driver, logs will not be available via the Docker Remote API.
Please make sure that your container or docker daemon uses json\-file
logging driver.
This ensures that logs are exposed via Docker Remote API.
To check, run the "docker logs" command.
If "docker logs CID" shows container logs then Logagent should be able
to collect the logs as well.
.PP
Please check the parsed timestamps! Logs with timestamps in the future
(or several months or years in the past) might not be displayed in
Sematext Cloud.
